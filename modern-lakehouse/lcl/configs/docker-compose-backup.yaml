version: '3.8'

networks:
  platform:  

volumes:
  minio:
  #postgresql:

# x-airflow-common:
#   &airflow-common
#   image: apache/airflow:slim-2.9.1-python3.11
#   env_file:
#     - .env-local
#   environment:
#     &airflow-common-env
#     AIRFLOW__CORE__EXECUTOR: LocalExecutor
#     AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${AIRFLOW_DATABASE}
#     AIRFLOW__CORE__FERNET_KEY: ''
#     AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
#     AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
#     AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
#     AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
#     _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
#   volumes:
#     - ./airflow/dags:/opt/airflow/dags
#     - ./airflow/logs:/opt/airflow/logs
#     - ./airflow/plugins:/opt/airflow/plugins
#   user: "${AIRFLOW_UID:-50000}:0"
#   depends_on:
#     &airflow-common-depends-on
#     postgres:
#       condition: service_healthy

services:

  minio:
    image: minio/minio:RELEASE.2024-05-10T01-41-38Z
    container_name: minio
    command: >
      server /data --console-address ":${MINIO_CONSOLE_PORT}" 
    ports:
      - "${MINIO_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "<http://localhost:9000/minio/health/live>"]
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      MINIO_ROOT_USER: "${MINIO_ACCESS_KEY}"
      MINIO_ROOT_PASSWORD: "${MINIO_SECRET_ACCESS_KEY}"
    restart: unless-stopped
    volumes:
      - ./minio:/data
    networks:
      - platform  

  minio-init:
    image: minio/mc:RELEASE.2024-05-10T01-41-38Z
    container_name: minio-init
    entrypoint: >
      /bin/sh -c "
      mc config host add minio <http://minio>:${MINIO_PORT} ${MINIO_ACCESS_KEY} ${MINIO_SECRET_ACCESS_KEY} --api S3v4;
      mc rm -r --force minio/${DATALAKE_BUCKET};
      mc mb minio/${DATALAKE_BUCKET};
      mc policy set public minio/${DATALAKE_BUCKET};
      exit 0;
      "
    depends_on: 
      - minio
    condition: service_healthy
    networks:
      - platform

  # postgres:
  #   image: postgres:14-alpine
  #   container_name: postgres
  #   ports:
  #     - "${POSTGRES_PORT}:5432"
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready", "-d", "db_prod"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #   env_file:
  #     - .env-local
  #   environment:
  #     POSTGRES_USER: ${POSTGRES_USER}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #     POSTGRES_MULTIPLE_DATABASES: ${MS_DATABASE},${AIRFLOW_DATABASE}
  #   restart: unless-stopped
  #   volumes:
  #     - ./postgres/init:/docker-entrypoint-initdb.d
  #     - ./postgresql:/var/lib/postgresql/data
  #   networks:
  #     - platform

  # airflow-webserver:
  #   <<: *airflow-common
  #   container_name: airflow-webserver
  #   command: webserver
  #   ports:
  #     - "${AIRFLOW_WEB_PORT}:8080"
  #   healthcheck:
  #     test: ["CMD", "curl", "--fail", "<http://localhost>:{$AIRFLOW_WEB_PORT}/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #     start_period: 30s
  #   restart: unless-stopped
  #   depends_on:
  #     <<: *airflow-common-depends-on
  #     airflow-init:
  #       condition: service_completed_successfully
  #   networks:
  #     - platform

  # airflow-scheduler:
  #   <<: *airflow-common
  #   container_name: airflow-scheduler
  #   command: scheduler
  #   healthcheck:
  #     test: ["CMD", "curl", "--fail", "<http://localhost:8974/health>"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #     start_period: 30s
  #   restart: unless-stopped
  #   depends_on:
  #     <<: *airflow-common-depends-on
  #     airflow-init:
  #       condition: service_completed_successfully
  #   networks:
  #     - platform

  # airflow-init:
  #   <<: *airflow-common
  #   container_name: airflow-init
  #   entrypoint: /bin/bash
  #   command:
  #     - -c
  #     - |
  #       mkdir -p /sources/logs /sources/dags /sources/plugins
  #       chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
  #       exec /entrypoint airflow version
  #   environment:
  #     <<: *airflow-common-env
  #     _AIRFLOW_DB_UPGRADE: 'true'
  #     _AIRFLOW_WWW_USER_CREATE: 'true'
  #     _AIRFLOW_WWW_USER_USERNAME: ${AIRFLOW_USER}
  #     _AIRFLOW_WWW_USER_PASSWORD: ${AIRFLOW_PASSWORD}
  #   user: "0:0"
  #   volumes:
  #     - ./airflow:/sources
  #   networks:
  #     - platform